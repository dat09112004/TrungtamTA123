import React, { useState } from "react";
import styles from "../css/Teacher_style.module.css";
import { Link } from "react-router-dom";

export default function TeacherHomework() {
  // ---- D·ªÆ LI·ªÜU M·∫™U ----
  const [homeworks, setHomeworks] = useState([
    {
      id: 1,
      code: "ENG101",
      subject: "Ti·∫øng Anh",
      title: "B√†i vi·∫øt lu·∫≠n 1",
      content: "Vi·∫øt ƒëo·∫°n vƒÉn 150 t·ª´ v·ªÅ 'My Favorite Hobby'",
      className: "12A",
      deadline: "2025-10-30",
      fileName: "Essay_ENG101.pdf",
    },
    {
      id: 2,
      code: "MATH102",
      subject: "To√°n h·ªçc",
      title: "B√†i t·∫≠p ƒê·∫°i s·ªë",
      content: "Gi·∫£i 5 b√†i ph∆∞∆°ng tr√¨nh b·∫≠c hai trang 34 SGK",
      className: "11B",
      deadline: "2025-11-01",
      fileName: "Algebra_HW.docx",
    },
    {
      id: 3,
      code: "CHEM201",
      subject: "H√≥a h·ªçc",
      title: "Th√≠ nghi·ªám Axit-Baz∆°",
      content: "L√†m b√°o c√°o ƒëo pH c·ªßa dung d·ªãch",
      className: "10A",
      deadline: "2025-11-05",
      fileName: "Chemistry_Lab.pdf",
    },
  ]);

  // ---- STATE ----
  const [showModal, setShowModal] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [editId, setEditId] = useState(null);

  const [searchTerm, setSearchTerm] = useState("");
  const [filterClass, setFilterClass] = useState("T·∫•t c·∫£");

  const [newHomework, setNewHomework] = useState({
    code: "",
    subject: "",
    title: "",
    content: "",
    className: "",
    deadline: "",
    file: null,
    fileName: "",
  });

  // ---- H√ÄM M·ªû / ƒê√ìNG MODAL ----
  const openModal = () => setShowModal(true);
  const closeModal = () => {
    setShowModal(false);
    setIsEditing(false);
    setEditId(null);
    setNewHomework({
      code: "",
      subject: "",
      title: "",
      content: "",
      className: "",
      deadline: "",
      file: null,
      fileName: "",
    });
  };

  // ---- H√ÄM TH√äM HO·∫∂C C·∫¨P NH·∫¨T B√ÄI T·∫¨P ----
  const handleSaveHomework = (e) => {
    e.preventDefault();
    const { code, subject, title, className, deadline } = newHomework;
    if (!code || !subject || !title || !className || !deadline) {
      alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!");
      return;
    }

    if (isEditing) {
      setHomeworks((prev) =>
        prev.map((hw) =>
          hw.id === editId
            ? { ...newHomework, id: hw.id, fileName: newHomework.fileName || hw.fileName }
            : hw
        )
      );
      alert("‚úÖ ƒê√£ c·∫≠p nh·∫≠t b√†i t·∫≠p!");
    } else {
      const newItem = {
        id: homeworks.length + 1,
        ...newHomework,
      };
      setHomeworks([...homeworks, newItem]);
      alert("‚úÖ ƒê√£ th√™m b√†i t·∫≠p m·ªõi!");
    }
    closeModal();
  };

  // ---- H√ÄM X√ìA ----
  const handleDelete = (id) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a b√†i t·∫≠p n√†y?")) {
      setHomeworks(homeworks.filter((hw) => hw.id !== id));
    }
  };

  // ---- H√ÄM S·ª¨A ----
  const handleEdit = (hw) => {
    setNewHomework({
      code: hw.code,
      subject: hw.subject,
      title: hw.title,
      content: hw.content,
      className: hw.className,
      deadline: hw.deadline,
      fileName: hw.fileName,
    });
    setEditId(hw.id);
    setIsEditing(true);
    setShowModal(true);
  };

  // ---- H√ÄM CH·ªåN FILE ----
  const handleFileUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      setNewHomework({ ...newHomework, file, fileName: file.name });
    }
  };

  // ---- L·ªåC & T√åM KI·∫æM ----
  const filteredHomeworks = homeworks.filter((hw) => {
    const matchSearch =
      hw.subject.toLowerCase().includes(searchTerm.toLowerCase()) ||
      hw.title.toLowerCase().includes(searchTerm.toLowerCase());
    const matchFilter =
      filterClass === "T·∫•t c·∫£" || hw.className === filterClass;
    return matchSearch && matchFilter;
  });

  const classOptions = ["T·∫•t c·∫£", ...new Set(homeworks.map((hw) => hw.className))];

  return (
    <div className="container active" id="homework">
      <div className="dashboard">
        {/* SIDEBAR */}
        <nav className="sidebar">
          <div className="sidebar-logo">
            <h2>üë®‚Äçüè´ Gi·∫£ng Vi√™n</h2>
          </div>
          <ul className="sidebar-menu">
            <li><Link to="/giangvien/Teacher_Dashboard"><span className="icon">üè†</span>Dashboard</Link></li>
            <li><Link to="/giangvien/Teacher_Schedule"><span className="icon">üìÖ</span>L·ªãch d·∫°y</Link></li>
            <li><Link to="/giangvien/Teacher_Track_Learning"><span className="icon">üë•</span>Theo d√µi</Link></li>
            <li><Link to="/giangvien/Teacher_Class_Infor"><span className="icon">üìã</span>Th√¥ng tin l·ªõp h·ªçc</Link></li>
            <li><Link to="/giangvien/Teacher_Periods"><span className="icon">‚è∞</span>S·ªë ti·∫øt d·∫°y</Link></li>
            <li><Link to="/giangvien/Teacher_Textbooks"><span className="icon">üìò</span>Gi√°o tr√¨nh</Link></li>
            <li><Link to="/giangvien/Teacher_Debt"><span className="icon">üí∞</span>C√¥ng n·ª£ c√° nh√¢n</Link></li>
            <li><Link to="/giangvien/Teacher_Homework" className="active"><span className="icon">üìù</span>Giao b√†i t·∫≠p</Link></li>
            <li><Link to="/giangvien/Teacher_Certificate"><span className="icon">üéì</span>Ch·ª©ng ch·ªâ</Link></li>
            <li><Link to="/giangvien/Teacher_Setting"><span className="icon">‚öôÔ∏è</span>C√†i ƒë·∫∑t</Link></li>
            <li><Link to="/"><span className="icon">üö™</span>ƒêƒÉng xu·∫•t</Link></li>
          </ul>
        </nav>

        {/* MAIN CONTENT */}
        <main className="main-content">
          <div className="header">
            <h1>üìù Qu·∫£n l√Ω b√†i t·∫≠p</h1>
            <button className="create-btn" onClick={openModal}>
              ‚ûï Th√™m b√†i t·∫≠p
            </button>
          </div>

          {/* B·ªô l·ªçc */}
          <div className="filters">
            <input
              type="text"
              className="filter-input"
              placeholder="üîç T√¨m ki·∫øm theo t√™n ho·∫∑c m√¥n h·ªçc..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
            <select
              className="filter-input"
              value={filterClass}
              onChange={(e) => setFilterClass(e.target.value)}
            >
              {classOptions.map((opt, i) => (
                <option key={i} value={opt}>
                  {opt}
                </option>
              ))}
            </select>
          </div>

          {/* B·∫¢NG B√ÄI T·∫¨P */}
          <div className="class-table">
            <table className="table">
              <thead>
                <tr>
                  <th>M√£ m√¥n</th>
                  <th>T√™n m√¥n h·ªçc</th>
                  <th>T√™n b√†i t·∫≠p</th>
                  <th>N·ªôi dung</th>
                  <th>L·ªõp</th>
                  <th>H·∫°n n·ªôp</th>
                  <th>T√†i li·ªáu</th>
                  <th>H√†nh ƒë·ªông</th>
                </tr>
              </thead>
              <tbody>
                {filteredHomeworks.length > 0 ? (
                  filteredHomeworks.map((hw) => (
                    <tr key={hw.id}>
                      <td>{hw.code}</td>
                      <td>{hw.subject}</td>
                      <td>{hw.title}</td>
                      <td>{hw.content}</td>
                      <td>{hw.className}</td>
                      <td>{hw.deadline}</td>
                      <td>
                        {hw.fileName ? (
                          <a href="#" style={{ color: "#4a90e2" }}>{hw.fileName}</a>
                        ) : (
                          <span style={{ color: "#aaa" }}>Ch∆∞a c√≥</span>
                        )}
                      </td>
                      <td>
                        <button className="action-btn btn-edit" onClick={() => handleEdit(hw)}>‚úèÔ∏è</button>
                        <button className="action-btn btn-delete" onClick={() => handleDelete(hw.id)}>üóëÔ∏è</button>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="8" style={{ textAlign: "center", color: "#888" }}>
                      Kh√¥ng t√¨m th·∫•y b√†i t·∫≠p ph√π h·ª£p.
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </main>
      </div>

      {/* MODAL TH√äM/S·ª¨A B√ÄI T·∫¨P */}
      {showModal && (
        <div className="modal-overlay" style={{ display: "flex" }}>
          <div className="modal" role="dialog">
            <div className="modal-header">
              <h3 className="modal-title">
                {isEditing ? "‚úèÔ∏è C·∫≠p nh·∫≠t b√†i t·∫≠p" : "‚ûï Th√™m b√†i t·∫≠p"}
              </h3>
              <button className="modal-close" onClick={closeModal}>
                √ó
              </button>
            </div>

            <div className="modal-body">
              <table className="modal-table">
                <tbody>
                  <tr>
                    <th>M√£ m√¥n</th>
                    <td>
                      <input
                        type="text"
                        value={newHomework.code}
                        onChange={(e) => setNewHomework({ ...newHomework, code: e.target.value })}
                      />
                    </td>
                  </tr>
                  <tr>
                    <th>T√™n m√¥n h·ªçc</th>
                    <td>
                      <input
                        type="text"
                        value={newHomework.subject}
                        onChange={(e) => setNewHomework({ ...newHomework, subject: e.target.value })}
                      />
                    </td>
                  </tr>
                  <tr>
                    <th>T√™n b√†i t·∫≠p</th>
                    <td>
                      <input
                        type="text"
                        value={newHomework.title}
                        onChange={(e) => setNewHomework({ ...newHomework, title: e.target.value })}
                      />
                    </td>
                  </tr>
                  <tr>
                    <th>N·ªôi dung</th>
                    <td>
                      <textarea
                        rows="3"
                        value={newHomework.content}
                        onChange={(e) => setNewHomework({ ...newHomework, content: e.target.value })}
                      ></textarea>
                    </td>
                  </tr>
                  <tr>
                    <th>L·ªõp</th>
                    <td>
                      <input
                        type="text"
                        value={newHomework.className}
                        onChange={(e) => setNewHomework({ ...newHomework, className: e.target.value })}
                      />
                    </td>
                  </tr>
                  <tr>
                    <th>H·∫°n n·ªôp</th>
                    <td>
                      <input
                        type="date"
                        value={newHomework.deadline}
                        onChange={(e) => setNewHomework({ ...newHomework, deadline: e.target.value })}
                      />
                    </td>
                  </tr>
                  <tr>
                    <th>T√†i li·ªáu</th>
                    <td>
                      <input type="file" onChange={handleFileUpload} />
                      {newHomework.fileName && (
                        <p style={{ marginTop: "6px", color: "#4a90e2" }}>
                          üìé {newHomework.fileName}
                        </p>
                      )}
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>

            <div className="modal-actions">
              <button className="btn btn-secondary" onClick={closeModal}>
                H·ªßy
              </button>
              <button className="btn btn-primary" onClick={handleSaveHomework}>
                {isEditing ? "C·∫≠p nh·∫≠t" : "L∆∞u"}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
